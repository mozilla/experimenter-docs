"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[7019],{4137:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(r),c=a,f=d["".concat(l,".").concat(c)]||d[c]||m[c]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2168:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(4137));const o={id:"desktop-migration-guide",title:"Desktop Migration Guide (JS)",slug:"/desktop-migration-guide"},i=void 0,s={unversionedId:"getting-started/engineers/desktop-migration-guide",id:"getting-started/engineers/desktop-migration-guide",title:"Desktop Migration Guide (JS)",description:"To migrate front-end normandy prefs to Nimbus controlled experiments or rollouts",source:"@site/docs/getting-started/engineers/desktop-migration-guide.md",sourceDirName:"getting-started/engineers",slug:"/desktop-migration-guide",permalink:"/desktop-migration-guide",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/getting-started/engineers/desktop-migration-guide.md",tags:[],version:"current",frontMatter:{id:"desktop-migration-guide",title:"Desktop Migration Guide (JS)",slug:"/desktop-migration-guide"},sidebar:"sidebar",previous:{title:"Desktop Feature API (JS and C++)",permalink:"/desktop-feature-api"},next:{title:"Required UI for Mobile Integration",permalink:"/getting-started/engineers/getting-started-mobile-required-ui"}},l={},u=[{value:"To migrate front-end normandy prefs to Nimbus controlled experiments or rollouts",id:"to-migrate-front-end-normandy-prefs-to-nimbus-controlled-experiments-or-rollouts",level:2},{value:"An illustrative example (about:myself)",id:"an-illustrative-example-aboutmyself",level:3},{value:"Step 1: Add a new feature to the manifest",id:"step-1-add-a-new-feature-to-the-manifest",level:2},{value:"Step 2: Update your feature code",id:"step-2-update-your-feature-code",level:2},{value:"Step 3: Run tests",id:"step-3-run-tests",level:2},{value:"FAQ",id:"faq",level:2},{value:"What happens if I run a Normandy experiment and a Nimbus experiment simultaneously?",id:"what-happens-if-i-run-a-normandy-experiment-and-a-nimbus-experiment-simultaneously",level:3},{value:"Links",id:"links",level:2}],p={toc:u},d="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"to-migrate-front-end-normandy-prefs-to-nimbus-controlled-experiments-or-rollouts"},"To migrate front-end normandy prefs to Nimbus controlled experiments or rollouts"),(0,a.kt)("p",null,"This guide will help you migrate your Desktop front-end code to run experiments with Nimbus, while still being able to use preferences for default and user-override values"),(0,a.kt)("p",null,"Prerequisites:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Your experimental variables are already instrumented with Firefox preferences"),(0,a.kt)("li",{parentName:"ul"},"You don't use the ",(0,a.kt)("inlineCode",{parentName:"li"},"user branch")," of each pref for anything other than actual user-defined values or testing (see docs on ",(0,a.kt)("a",{parentName:"li",href:"/desktop-feature-api#configuration-sources"},"order of precedence"),")"),(0,a.kt)("li",{parentName:"ul"},"Your code can import a ESM")),(0,a.kt)("h3",{id:"an-illustrative-example-aboutmyself"},"An illustrative example (about:myself)"),(0,a.kt)("p",null,"For the purposes of this guide, we will be migrating an imaginary about page (",(0,a.kt)("inlineCode",{parentName:"p"},"about:myself"),"), which uses the following preferences defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"firefox.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'pref("browser.aboutmyself.enabled", true);\npref("browser.aboutmyself.bgcolor", "#FE8DAE");\n')),(0,a.kt)("h2",{id:"step-1-add-a-new-feature-to-the-manifest"},"Step 1: Add a new feature to the manifest"),(0,a.kt)("p",null,"First, you will need to register a new feature in ",(0,a.kt)("a",{parentName:"p",href:"https://searchfox.org/mozilla-central/source/toolkit/components/nimbus/FeatureManifest.yaml"},"FeatureManifest.yaml"),". In this case, we're creating one called ",(0,a.kt)("inlineCode",{parentName:"p"},"aboutmyself"),".\nAfter adding the feature a build step is required to update the appropriate header file."),(0,a.kt)("p",null,"Read more to find out if you want to send an ",(0,a.kt)("a",{parentName:"p",href:"/deep-dives/jetstream/overview#enrollment-vs-exposure"},"exposure event"),". This is optional but a decision must be recorded in the manifest."),(0,a.kt)("p",null,"Each preference is registered as a ",(0,a.kt)("inlineCode",{parentName:"p"},"variable"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"aboutmyself:\n  description: A page that shows personal browsing stats\n  # Exposure is optional, in which case `hasExposure` would be false\n  # and `exposureDescription` would not be defined\n  hasExposure: true\n  exposureDescription: The exposure is the earliest moment that the user could be affected by the experimental treatment\n  variables:\n    enabled:\n      type: boolean\n      fallbackPref: browser.aboutmyself.enabled\n    bgColor:\n      type: string\n      fallbackPref: browser.aboutmyself.bgcolor\n")),(0,a.kt)("h2",{id:"step-2-update-your-feature-code"},"Step 2: Update your feature code"),(0,a.kt)("p",null,"First, you will need to import ",(0,a.kt)("inlineCode",{parentName:"p"},"ExperimentAPI.sys.mjs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const lazy = {}\nChromeUtils.defineESModuleGetters(lazy, {\n  NimbusFeatures: "resource://nimbus/ExperimentAPI.sys.mjs",\n});\n')),(0,a.kt)("p",null,"Then anywhere in your code that uses ",(0,a.kt)("inlineCode",{parentName:"p"},"Services.prefs")," to get experiment-defined values, use ",(0,a.kt)("inlineCode",{parentName:"p"},"lazy.NimbusFeatures")," instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'element.style.backgroundColor = Services.prefs.getBoolPref("browser.aboutmyself.bgColor");\n')),(0,a.kt)("p",null,"becomes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'element.style.backgroundColor = NimbusFeatures.aboutmyself.getVariable("bgColor");\n')),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"/desktop-feature-api#api-reference-guide"},"API reference docs")," for more details, including listening to changes."),(0,a.kt)("h2",{id:"step-3-run-tests"},"Step 3: Run tests"),(0,a.kt)("p",null,"If you've configured fallback preferences your tests should pass as written, but we recommend also reading ",(0,a.kt)("a",{parentName:"p",href:"/desktop-feature-api-testing"},"Testing Guide")," to add experiment-specific tests."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"what-happens-if-i-run-a-normandy-experiment-and-a-nimbus-experiment-simultaneously"},"What happens if I run a Normandy experiment and a Nimbus experiment simultaneously?"),(0,a.kt)("p",null,"If possible, we do not recommend you run Normandy and Nimbus experiments on the same user population simultaneously. If a user were to enroll in an experiment from both sources, the value returned would follow the rules defined in ",(0,a.kt)("a",{parentName:"p",href:"/desktop-feature-api#configuration-sources"},"Configuration Sources docs"),". (Nimbus values override default pref branch values; user pref branch values override Nimbus)."),(0,a.kt)("p",null,"If you have a long-running Normandy experiment during which you must launch a Nimbus experiment, you can add a custom targeting rule to exclude users from a specific experiment ID."),(0,a.kt)("h2",{id:"links"},"Links"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://phabricator.services.mozilla.com/D118760"},"PR Example of a switch from prefs to NimbusFeatures")," (This is slightly outdated)")))}m.isMDXComponent=!0}}]);