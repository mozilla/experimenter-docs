"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[376],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},425:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(4334);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,o),hidden:n},t)}},3992:(e,t,n)=>{n.d(t,{Z:()=>y});var r=n(7462),a=n(7294),i=n(4334),o=n(2957),l=n(6550),s=n(5238),u=n(3609),c=n(2560);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:n,groupId:r}),[p,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=s??p;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var b=n(1048);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),r=u[n].value;r!==l&&(p(t),s(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function w(e){const t=g(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",h.tabList)},a.createElement(k,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function y(e){const t=(0,b.Z)();return a.createElement(w,(0,r.Z)({key:String(t)},e))}},3006:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(4137));n(3992),n(425);const i={id:"desktop-feature-api-testing",title:"Desktop Feature API testing",slug:"/desktop-feature-api-testing"},o=void 0,l={unversionedId:"workflow/testing/desktop-feature-api-testing",id:"workflow/testing/desktop-feature-api-testing",title:"Desktop Feature API testing",description:"In order to make testing easier we created some helpers that can be accessed by including",source:"@site/docs/workflow/testing/desktop-feature-api-testing.mdx",sourceDirName:"workflow/testing",slug:"/desktop-feature-api-testing",permalink:"/desktop-feature-api-testing",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/workflow/testing/desktop-feature-api-testing.mdx",tags:[],version:"current",frontMatter:{id:"desktop-feature-api-testing",title:"Desktop Feature API testing",slug:"/desktop-feature-api-testing"},sidebar:"sidebar",previous:{title:"Testing the preview flow on Android",permalink:"/android-preview-testing"},next:{title:"Testing the preview flow on iOS",permalink:"/ios-preview-testing"}},s={},u=[{value:"Testing your feature integrating with Nimbus",id:"testing-your-feature-integrating-with-nimbus",level:2},{value:"Testing with a live Nimbus recipe",id:"testing-with-a-live-nimbus-recipe",level:2},{value:"Testing with Desktop Rollouts",id:"testing-with-desktop-rollouts",level:2},{value:"Testing with gTest",id:"testing-with-gtest",level:2},{value:"Examples",id:"examples",level:4}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to make testing easier we created some helpers that can be accessed by including"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { ExperimentFakes } = ChromeUtils.importESModule(\n  "resource://testing-common/NimbusTestUtils.sys.mjs",\n);\n')),(0,a.kt)("h2",{id:"testing-your-feature-integrating-with-nimbus"},"Testing your feature integrating with Nimbus"),(0,a.kt)("p",null,"You need to provide a feature configuration and await enrollment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'let doExperimentCleanup = await ExperimentFakes.enrollWithFeatureConfig({\n  featureId: "<YOUR FEATURE>",\n  // You can add values for each variable you added to the manifest\n  value: {\n    enabled: true,\n  },\n});\n\n// Now you can assume the feature is enabled so you can\n// test and that it\'s doing the right thing\n\n// Assert.ok(It works!)\n\n// Finishing up\nawait doExperimentCleanup();\n')),(0,a.kt)("h2",{id:"testing-with-a-live-nimbus-recipe"},"Testing with a live Nimbus recipe"),(0,a.kt)("p",null,"If you already published an experiment through Nimbus then you will want to test enrollment in the browser."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Flip the following pref to true in the browser you want to enroll (in about:config)")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"nimbus.debug")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"You need to copy paste the following URL and fill in the required details.")),(0,a.kt)("p",null,"For experiments that are already live:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"about:studies?optin_slug=<YOUR_EXPERIMENT_SLUG>&optin_branch=<BRANCH_SLUG_TO_ENROLL>")),(0,a.kt)("p",null,'For experiments that are in "preview" mode:'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"about:studies?optin_slug=<YOUR_EXPERIMENT_SLUG>&optin_branch=<BRANCH_SLUG_TO_ENROLL>&optin_collection=nimbus-preview")),(0,a.kt)("h2",{id:"testing-with-desktop-rollouts"},"Testing with Desktop Rollouts"),(0,a.kt)("p",null,"For writing tests you usually want to have the following modules imported:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const { ExperimentAPI, NimbusFeatures } = ChromeUtils.importESModule(\n  "resource://nimbus/ExperimentAPI.sys.mjs",\n);\nconst { ExperimentFakes } = ChromeUtils.importESModule(\n  "resource://testing-common/NimbusTestUtils.sys.mjs",\n);\n')),(0,a.kt)("p",null,"Next this is how you would set up your feature to test integration with Desktop Rollouts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Ensure everything has finished initializing\nawait ExperimentAPI.ready();\n// The actual setup\nconst doCleanup = await ExperimentFakes.enrollWithFeatureConfig(\n  {\n    // Reference your feature id already defined in the FeatureManifest.yaml\n    featureId: "<YOUR FEATURE ID>",\n    value: {\n      enabled: true,\n    },\n  },\n  { isRollout: true }\n);\n\n// Now your feature integration is ready for testing\n\n// NimbusFeatures.<YOUR FEATURE>.getVariable("enabled")\n// NimbusFeatures.<YOUR FEATURE>.getAllVariables()\n\nawait doCleanup(); // to remove the rollout\n')),(0,a.kt)("h2",{id:"testing-with-gtest"},"Testing with gTest"),(0,a.kt)("p",null,"Otherwise for a ",(0,a.kt)("inlineCode",{parentName:"p"},"gTest")," or other requirements you can set a pref ",(0,a.kt)("inlineCode",{parentName:"p"},"nimbus.syncdatastore.<feature name>.<variable name>")," with the appropriate type you defined in the FeatureManifest."),(0,a.kt)("p",null,"\u26a0\ufe0f This variable naming convention is an implementation detail and might change in the future."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "mozilla/browser/NimbusFeatures.h"\n\n# Set a preference as described above based on what you want the test to do\n\n// GetInt will return the appropriate value you set\nNimbusFeatures::GetInt("aboutwelcome"_ns, "skipFocus"_ns, false);\n\n// On update will call your callback function when the pref value changes\nNimbusFeatures::OnUpdate("aboutwelcome"_ns, "skipFocus"_ns,\n  [](const char*, void*){}, void*);\n')),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Examples of platform consumers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://phabricator.services.mozilla.com/D121112"},"Bug 1719070 - UA: Add support for a Nimbus experiment to override Firefox's User-Agent string."))))}d.isMDXComponent=!0}}]);