"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[3363],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||f[m]||i;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const i={id:"desktop-pref-experiments",title:"Desktop Pref Experiments",slug:"/desktop-pref-experiments"},l=void 0,o={unversionedId:"deep-dives/desktop/desktop-pref-experiments",id:"deep-dives/desktop/desktop-pref-experiments",title:"Desktop Pref Experiments",description:"As of Firefox 107, Nimbus supports experiments that set preferences on Desktop.",source:"@site/docs/deep-dives/desktop/desktop-pref-experiments.md",sourceDirName:"deep-dives/desktop",slug:"/desktop-pref-experiments",permalink:"/desktop-pref-experiments",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/desktop/desktop-pref-experiments.md",tags:[],version:"current",frontMatter:{id:"desktop-pref-experiments",title:"Desktop Pref Experiments",slug:"/desktop-pref-experiments"},sidebar:"sidebar",previous:{title:"Launching Incident Response Pref Flips",permalink:"/desktop-incident-response"},next:{title:"Desktop Targeting debug",permalink:"/desktop-targeting-debug"}},s={},p=[{value:"Pref branches",id:"pref-branches",level:2},{value:"Configuring Your Feature in Experimenter",id:"configuring-your-feature-in-experimenter",level:2},{value:"Experiments vs Rollouts",id:"experiments-vs-rollouts",level:2},{value:"Unenrollment from Pref Experiments",id:"unenrollment-from-pref-experiments",level:2},{value:"Unexpected Preference Changes",id:"unexpected-preference-changes",level:3},{value:"Manifest Changes",id:"manifest-changes",level:3},{value:"Conflicts with Incident Response Pref Flips",id:"conflicts-with-incident-response-pref-flips",level:3},{value:"Restrictions with Fallback Prefs",id:"restrictions-with-fallback-prefs",level:2},{value:"Example Feature",id:"example-feature",level:2}],u={toc:p},c="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"As of Firefox 107, Nimbus supports experiments that set preferences on Desktop.\nUnlike Normandy, Nimbus cannot set arbitrary preferences; instead, the\npreferences that may be set are determined by the feature manifest."),(0,a.kt)("p",null,"Each variable in a Nimbus feature can set a single pref of any type."),(0,a.kt)("p",null,"NB: Support for JSON variables was added in Firefox 126. The value of the pref\nwill be ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON.stringify(value)"),"."),(0,a.kt)("admonition",{title:"Danger, Will Robinson!",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Prefs are complicated and it is easy to shoot yourself in the foot when using them if\nyou're not cautious. The Nimbus team has prepared some guidance about using\nprefs in your feature:"),(0,a.kt)("p",{parentName:"admonition"},"If you do not actually ",(0,a.kt)("em",{parentName:"p"},"need")," to use a pref in your feature, we recommend that\nyou do not use one and instead read directly from the Nimbus API (via\n",(0,a.kt)("inlineCode",{parentName:"p"},'NimbusFeatures.myFeature.getVariable("var")')," /\n",(0,a.kt)("inlineCode",{parentName:"p"},"NimbusFeatures.myFeature.getAllVariables()"),")."),(0,a.kt)("p",{parentName:"admonition"},"If you ",(0,a.kt)("em",{parentName:"p"},"must")," use a pref, then you must be careful about all writers to that\npref. Please read ",(0,a.kt)("a",{parentName:"p",href:"#user-preference-changes"},"this section")," for a detailed\nexplanation of\npref writing interactions in Nimbus. We recommend that no other code write to\nthat pref."),(0,a.kt)("p",{parentName:"admonition"},"Finally, we advise against instructing users to edit the pref via\n",(0,a.kt)("inlineCode",{parentName:"p"},"about:config"),'. This has a knock-on effect of normalizing users interacting with\ncomplex "under the hood" settings which can be taken advantage of by malicious\nactors. In addition, manually changing some prefs that are otherwise managed by\nclient code can violate invariants and force clients into confusing or\nunpredicted scnearios.'),(0,a.kt)("p",{parentName:"admonition"},"If you've read to the end of this and aren't scared off, please read ",(0,a.kt)("a",{parentName:"p",href:"#pref-branches"},"this\nsection")," on which branch your feature should write to.")),(0,a.kt)("h2",{id:"pref-branches"},"Pref branches"),(0,a.kt)("p",null,"Each variable using ",(0,a.kt)("inlineCode",{parentName:"p"},"setPref")," must specify which branch will be written to. There are two branches,\neach with its trade-offs:"),(0,a.kt)("dl",null,(0,a.kt)("dt",null,"The default branch"),(0,a.kt)("dd",null,"The default branch is where Firefox's default pref values come from.",(0,a.kt)("p",null,"  This branch ",(0,a.kt)("em",null,"is not")," persisted to disk and so there will be a time\nperiod during startup before Nimbus has finished initializing where default\npref values will not represent the current experiment state."),(0,a.kt)("p",null,"  You may want to use this branch if your code distinguishes from user branch\nvalues versus default branch values.")),(0,a.kt)("dt",null,"The user branch"),(0,a.kt)("dd",null,"The user branch is where user's configuration choices are stored (e.g., when changing settings via ",(0,a.kt)("code",null,"about:preferences")," or ",(0,a.kt)("code",null,"about:config"),").",(0,a.kt)("p",null,"  This branch ",(0,a.kt)("em",null,"is")," persisted to disk and loaded early during startup,\nbefore Nimbus is initialized. Additionally, if a pref has a value on both the\ndefault and user branches the user branch value will take precedence (e.g.,"),(0,a.kt)("code",null,'Services.prefs.getBoolPref("foo.bar.baz")')," will attempt to read from the user branch first).")),(0,a.kt)("p",null,"If your feature configuration needs to be available early at startup (e.g., so\nthat Gecko internals can be initialized properly) you will have to use the user\nbranch."),(0,a.kt)("p",null,"Nimbus startup is triggered asynchronously after the UI has been shown\n(technically after ",(0,a.kt)("inlineCode",{parentName:"p"},"sessionstore-windows-restored"),") or 5 seconds after\n",(0,a.kt)("inlineCode",{parentName:"p"},"browser-before-ui-startup")," (whichever comes first). Therefore, if your feature\ncontrols whether or not some amount of UI is shown in the browser chrome (e.g.,\nwhether a button shows on the toolbar or not), you likely will want to use the\nuser branch."),(0,a.kt)("admonition",{title:"Respecting User Choice",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"It is important to remember that writing to prefs on the user branch can\n",(0,a.kt)("strong",{parentName:"p"},"overwrite user choices"),"."),(0,a.kt)("p",{parentName:"admonition"},'Experimenter can automatically exclude users that have changed prefs controlled\nby your feature. To enable this behaviour, check the "Prevent enrollment if\nusers have changed any prefs set by this experiment" checkbox on the Branches\npage of your experiment. If you use this feature, you likely want to enable\n"Sticky Enrollment" on the audience page as well to prevent unexpected\nunenrollments.'),(0,a.kt)("p",{parentName:"admonition"},"You may also want to use this feature if you are writing to the default pref\nbranch and any user branch overrides would cause breakage result in incorrect\nanalysis.")),(0,a.kt)("h2",{id:"configuring-your-feature-in-experimenter"},"Configuring Your Feature in Experimenter"),(0,a.kt)("p",null,"If you are configuring an experiment you should include the same prefs ",(0,a.kt)("strong",{parentName:"p"},"in\nevery branch of your experiment"),". This protects your experiment from being\nimpacted by user pref changes across all branches."),(0,a.kt)("p",null,"For example, let's consider the following feature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"feature:\n  variables:\n    enabled:\n      type: boolean\n      setPref:\n        # Defaults to false\n        pref: myFeature.enabled\n        branch: user\n    \n    optionalFeatureEnabled:\n      type: boolean\n      setPref:\n        # Defaults to false\n        pref: myFeature.optional.enabled\n        branch: user\n")),(0,a.kt)("p",null,"If we have an experiment with three branches:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Control"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{}\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Treatment A"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "enabled": true\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Treatment B"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "enabled": true,\n  "optionalFeatureEnabled": true\n}\n')),(0,a.kt)("p",null,"Nimbus only registers pref listeners for variables controlled by the current\nbranch. So if the user is enrolled in the ",(0,a.kt)("strong",{parentName:"p"},"Control")," branch Nimbus will not\nlisten for any pref changes. In the ",(0,a.kt)("strong",{parentName:"p"},"Treatment A")," branch  Nimbus will listen\nfor changes to ",(0,a.kt)("inlineCode",{parentName:"p"},"myFeature.enabled"),". In the ",(0,a.kt)("strong",{parentName:"p"},"Treatment B")," branch Nimbus will\nlisten to changes to both ",(0,a.kt)("inlineCode",{parentName:"p"},"myFeature.enabled")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"myFeature.optional.enabled"),"."),(0,a.kt)("p",null,"It is therefore possible for a user to be in the ",(0,a.kt)("strong",{parentName:"p"},"Control")," branch with\n",(0,a.kt)("inlineCode",{parentName:"p"},"myFeature.enabled")," set to true and it is also possible for a user to tbe in\n",(0,a.kt)("strong",{parentName:"p"},"Treatment A")," branch and have ",(0,a.kt)("inlineCode",{parentName:"p"},"myFeature.optional.enabled")," set to true."),(0,a.kt)("p",null,"The proper way to set up this experiment is therefore as follows:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Control"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "enabled": false,\n  "optionalFeatureEnabled": false\n}\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Treatment A"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "enabled": true,\n  "optionalFeatureEnabled": false\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Treatment B"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "enabled": true,\n  "optionalFeatureEnabled": true\n}\n')),(0,a.kt)("h2",{id:"experiments-vs-rollouts"},"Experiments vs Rollouts"),(0,a.kt)("p",null,"Users can be enrolled in an experiment and rollout for the same feature. If both\nan experiment and rollout set a variable that sets a pref, then the experiment\nwill take precedence. If the user unenrolls from the experiment, then the pref\nwill be set to the value specified in the rollout."),(0,a.kt)("p",null,"When the user is no longer enrolled in either an experiment or a rollout setting\na given pref, then it will be reset to its original value at the time of the\nfirst enrollment, with some caveats:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the pref is set on the default branch (see ",(0,a.kt)("a",{parentName:"li",href:"#pref-branches"},"below"),") and the\npref was not set before enrollment, then the pref will not change until the\nnext restart. This is due to a technical limitation: default branch values\ncannot be cleared."),(0,a.kt)("li",{parentName:"ul"},"If the pref is set on the user branch and the pref was not set before\nenrollment, then the pref will be cleared and will be no longer available.")),(0,a.kt)("h2",{id:"unenrollment-from-pref-experiments"},"Unenrollment from Pref Experiments"),(0,a.kt)("p",null,"Normally Nimbus will only unenroll from experiments and rollouts when we check\nfor new recipes (periodically or after startup). During that check, Nimbus will\nunenroll if:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the experiment or rollout is no longer present on Remote Settings (reported as\n",(0,a.kt)("inlineCode",{parentName:"li"},"recipe-not-seen")," in telemetry);"),(0,a.kt)("li",{parentName:"ul"},"the experiment or rollout has a targeting expression that is no longer true\n(reported as ",(0,a.kt)("inlineCode",{parentName:"li"},"targeting-mismatch"),");"),(0,a.kt)("li",{parentName:"ul"},"the rollout no longer matches bucketing (reported ",(0,a.kt)("inlineCode",{parentName:"li"},"bucketing"),").")),(0,a.kt)("admonition",{title:"Including prefs in targeting expressions",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"If your experiment or rollout includes preference checks in its targeting\nexpression then it may unexpectedly unenroll or prevent a rollout or experiment\non the same feature from enrolling."),(0,a.kt)("p",{parentName:"admonition"},'Experimenter can automatically exclude users that have changed prefs controlled\nby your feature. If your feature writes to the user branch and uses this feature\n(the "Prevent enrollment if users have changed any prefs set by this experiment"\ncheckbox on the branches page), you ',(0,a.kt)("strong",{parentName:"p"},"must"),' enable "sticky enrollment" on the\nAudience Page. Otherwise your experiment will automatically unenroll the next\ntime Nimbus evaluates targeting.')),(0,a.kt)("p",null,"Pref Experiments can unenroll for additional reasons:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the experiment or rollout sets a pref and that pref changes (either by a user\nmaking a change in ",(0,a.kt)("inlineCode",{parentName:"li"},"about:config")," or client code using the pref API);"),(0,a.kt)("li",{parentName:"ul"},"the feature manifest changed sufficiently; or"),(0,a.kt)("li",{parentName:"ul"},"Nimbus enrolled in an ",(0,a.kt)("a",{parentName:"li",href:"/desktop-incident-response"},"Incident Response Pref Flip")," that set the\nsame pref.")),(0,a.kt)("h3",{id:"unexpected-preference-changes"},"Unexpected Preference Changes"),(0,a.kt)("p",null,"If a user is enrolled in an experiment or rollout that sets a pref and that pref\nchanges, the user will be unenrolled from the experiment (or rollout). This\nincludes both changes made by the user and changes in code. Experiment runners\nshould be careful to ensure there is no code in tree that will modify prefs they\nare experimenting on, otherwise their populations may get spuriously unenrolled."),(0,a.kt)("p",null,"The new value of the preference will be persisted."),(0,a.kt)("h3",{id:"manifest-changes"},"Manifest Changes"),(0,a.kt)("p",null,"Some changes to the feature manifest may result in unenrollment from an active\nexperiment:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The feature being removed."),(0,a.kt)("li",{parentName:"ul"},"A variable that is currently setting a pref is removed."),(0,a.kt)("li",{parentName:"ul"},"A variable that is currently setting a pref either changes the pref it is\nsetting or no longer sets a pref (i.e., its ",(0,a.kt)("inlineCode",{parentName:"li"},"setPref")," value changes or is\nremoved).")),(0,a.kt)("p",null,"It should be noted that unenrollment for these reasons will only occur when the\nuser is enrolled in a pref-setting experiment. If a feature specifies both\npref-setting and non-pref setting variables, then changes to the manifest will\nnot result in unenrollment if the active experiment does not have any values for\npref-setting variables."),(0,a.kt)("h3",{id:"conflicts-with-incident-response-pref-flips"},"Conflicts with Incident Response Pref Flips"),(0,a.kt)("p",null,"If a user is enrolled in a setPref experiment/rollout and then enrolls in an\n",(0,a.kt)("a",{parentName:"p",href:"/desktop-incident-response"},"incident response pref flip"),", they will be unenrolled from the\nsetPref experiment/rollout. This will result in an unenrollment event\n(",(0,a.kt)("a",{parentName:"p",href:"https://dictionary.telemetry.mozilla.org/apps/firefox_desktop/metrics/nimbus_events_unenrollment"},"glean"),", ",(0,a.kt)("a",{parentName:"p",href:"https://probes.telemetry.mozilla.org/?search=unenroll&view=detail&probeId=event%2Fnormandy.unenroll%23unenroll"},"legacy"),") being submitted with the\nfollowing data:"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"Glean Field"),(0,a.kt)("th",null,"Legacy Field"),(0,a.kt)("th",null,"Description"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"reason")),(0,a.kt)("td",null,(0,a.kt)("code",null,"reason")),(0,a.kt)("td",null,"The string ",(0,a.kt)("code",null,'"prefFlips-conflict"'))),(0,a.kt)("tr",null,(0,a.kt)("td",null,(0,a.kt)("code",null,"conflicting_slug")),(0,a.kt)("td",null,(0,a.kt)("code",null,"conflictingSlug")),(0,a.kt)("td",null,"The slug of the experiment that caused the unenrollment.")))),(0,a.kt)("h2",{id:"restrictions-with-fallback-prefs"},"Restrictions with Fallback Prefs"),(0,a.kt)("p",null,"Variables may not specify both a ",(0,a.kt)("inlineCode",{parentName:"p"},"fallbackPref")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"setPref"),"."),(0,a.kt)("p",null,"Fallback prefs and set prefs are mutually exclusive. That is, If any variable in\nany feature specifies a pref as a fallback pref, no variable may set that\nvariable as a set pref and vice versa."),(0,a.kt)("p",null,"These restrictions are enforced at build time."),(0,a.kt)("h2",{id:"example-feature"},"Example Feature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"my-feature:\n  description: A description of my feature\n  owner: whoami@mozilla.com\n  hasExposure: false\n  variables:\n    enabled:\n      description: A variable setting a boolean pref to enable a feature.\n      type: boolean\n      setPref:\n        branch: user\n        pref: my_feature.enabled\n    name:\n      description: A variable setting a string pref to determine some name.\n      type: string\n      setPref:\n        branch: user\n        pref: my_feature.name\n    count:\n      description: A variable setting an integer pref to determine some count.\n      type: int\n      setPref:\n        branch: default\n        pref: my_feature.count\n")))}f.isMDXComponent=!0}}]);