"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[4743],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),h=l,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,i=new Array(a);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),l=(n(7294),n(4137));const a={id:"desktop-incident-response",title:"Launching Incident Response Pref Flips",slug:"/desktop-incident-response"},i=void 0,o={unversionedId:"deep-dives/desktop/desktop-incident-response",id:"deep-dives/desktop/desktop-incident-response",title:"Launching Incident Response Pref Flips",description:"As of Firefox 129 (and 128.2 ESR), Firefox supports flipping any pref via",source:"@site/docs/deep-dives/desktop/desktop-incident-response.md",sourceDirName:"deep-dives/desktop",slug:"/desktop-incident-response",permalink:"/desktop-incident-response",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/desktop/desktop-incident-response.md",tags:[],version:"current",frontMatter:{id:"desktop-incident-response",title:"Launching Incident Response Pref Flips",slug:"/desktop-incident-response"},sidebar:"sidebar",previous:{title:"Desktop Local Experiment Iteration",permalink:"/desktop-enroll-locally"},next:{title:"Desktop Pref Experiments",permalink:"/desktop-pref-experiments"}},s={},p=[{value:"Multi-feature",id:"multi-feature",level:2},{value:"Mismatched Types",id:"mismatched-types",level:2},{value:"Conflicts with setPref Experiments",id:"conflicts-with-setpref-experiments",level:2},{value:"User Pref Changes",id:"user-pref-changes",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"As of Firefox 129 (and 128.2 ESR), Firefox supports flipping any pref via\nNimbus. This is done with the ",(0,l.kt)("inlineCode",{parentName:"p"},"prefFlips")," feature. The JSON Schema definition\nfor the feature value can be found ",(0,l.kt)("a",{parentName:"p",href:"https://searchfox.org/mozilla-central/source/toolkit/components/nimbus/schemas/PrefFlipsFeature.schema.json"},"here"),"."),(0,l.kt)("h1",{id:"warning"},"Warning"),(0,l.kt)("p",null,"This feature is ",(0,l.kt)("em",{parentName:"p"},"not intended for use in experimentation"),". If you want to do an\nexperiment on some number of prefs in Firefox, you ",(0,l.kt)("strong",{parentName:"p"},"must")," register these prefs\nwith the ",(0,l.kt)("a",{parentName:"p",href:"https://searchfox.org/mozilla-central/source/toolkit/components/nimbus/FeatureManifest.yaml"},"Feature Manifest"),". This ensures that prefs\ncontrolled via Nimbus are subject to code review. See the docs on ",(0,l.kt)("a",{parentName:"p",href:"/desktop-pref-experiments"},"Desktop pref\nexperiments")," for more information."),(0,l.kt)("p",null,"Because the incident response feature can change ",(0,l.kt)("em",{parentName:"p"},"any pref"),", it should be used\nwith caution. Remember: with great power comes great responsibility."),(0,l.kt)("p",null,"Only the release management team can approve incident reponse pref flips."),(0,l.kt)("h1",{id:"behaviour"},"Behaviour"),(0,l.kt)("p",null,"When a client enrolls into a rollout using this feature, Nimbus will set (or\nunset) all the prefs to the values specified. Prefs on the ",(0,l.kt)("inlineCode",{parentName:"p"},"user")," branch will\npersist through startup and be available immediately. Prefs set on the ",(0,l.kt)("inlineCode",{parentName:"p"},"default"),"\nbranch will not persist through startup and will not have their correct values\nuntil Nimbus finishes initialization."),(0,l.kt)("p",null,"When the client unenrolls, all prefs will be restored to their values before\nenrollment. If the pref did not exist before enrollment, it will be cleared if\nit was set on the user branch. The default branch does not support clearing, so\nthe pref and its value from the enrollment will persist until the browser\ncloses."),(0,l.kt)("p",null,"As of Firefox 140, this feature supports co-enrollment, which allows the client\nto enroll in multiple rollouts at once. The client will apply the configuration\nfrom all enrolled rollouts. If multiple rollouts attempt set the same pref they\nmust all set it to the same branch and value. If not, the disagreeing rollout\nwill be unenrolled."),(0,l.kt)("h2",{id:"multi-feature"},"Multi-feature"),(0,l.kt)("p",null,"The incident response feature ",(0,l.kt)("em",{parentName:"p"},"cannot")," be used with other features."),(0,l.kt)("h1",{id:"launching-a-pref-flip"},"Launching a Pref Flip"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a new experiment in\n",(0,l.kt)("a",{parentName:"p",href:"https://experimenter.services.mozilla.com/nimbus/"},"Experimenter")," with an\nappropriate public name (this will appear in ",(0,l.kt)("inlineCode",{parentName:"p"},"about:studies"),") for Firefox\nDesktop.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'Fill in the "overview" page as appropriate.')),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'Fill in the "branches" page:'),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the ",(0,l.kt)("inlineCode",{parentName:"p"},"prefFlips")," feature.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'Check the "This is a rollout (single branch)" checkbox.'),(0,l.kt)("p",{parentName:"li"},"This is not strictly required, but rollout enrollment can be dialed up or\ndown without requiring ending the experiment and re-launching. If you do\nnot want to use a rollout so that you can set different prefs on different\nbranches you likely want to run an experiment, in which case this feature\nis not appropriate for your use case.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'Enter a description for the "Control" branch.')),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Enter a value for the ",(0,l.kt)("inlineCode",{parentName:"p"},"prefFlips")," (see the ",(0,l.kt)("a",{parentName:"p",href:"#example-configuration"},"example configuration"),").")))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'Fill in the "Audience" page:'),(0,l.kt)("dl",null,(0,l.kt)("dt",null,"channel"),(0,l.kt)("dd",null,"You must specify a channel to use this feature. If you want to change a pref across multiple channels you must repeat this process for each channel."),(0,l.kt)("dt",null,"Min Version"),(0,l.kt)("dd",null,"You must specify a minimum version. The minimum versions supported are 129 on the Nightly, Beta, Aurora (developer edition), and Release channel and 128.2 on the ESR channel."),(0,l.kt)("dt",null,"Advanced Targeting"),(0,l.kt)("dd",null,(0,l.kt)("p",null,'If you want to enroll the entire population, choose "No Targeting - All users". Otherwise, select an appropriate targeting criteria.'),(0,l.kt)("p",null,"If a targeting criteria does not exist, one will have to be added. See the ",(0,l.kt)("a",{href:"/targeting/advanced-targeting#answer"},"advanced targeting FAQ")," or ask for help in ",(0,l.kt)("code",null,"#ask-experimenter")," on Slack.")),(0,l.kt)("dt",null,"Sticky Enrollment"),(0,l.kt)("dd",null,(0,l.kt)("p",null,"Experiment targeting is re-evaluated every time the client checks for new recipes. If you want the selected advanced targeting to only be evaluated during enrollment, check this box."),(0,l.kt)("p",null,(0,l.kt)("strong",null,"Note:")," Rollouts can re-enroll after unenrolling (e.g., if enrollment percentage decreased and then increased). In these cases, rollouts will re-evaluate targeting, ignoring the sticky flag.")),(0,l.kt)("dt",null,"Percent of Clients"),(0,l.kt)("dd",null,"Enter the percent of clients you wish to enroll. This value can be changed after launch for rollouts."))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"On the Summary Page, request launch."),(0,l.kt)("p",{parentName:"li"},"Rollouts using the incident response feature cannot be launched to preview.\nWe highly reccomend you QA these recipes on the ",(0,l.kt)("a",{parentName:"p",href:"https://stage.experimenter.nonprod.webservices.mozgcp.net/nimbus/"},"staging instance of\nexperimenter")," first."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Note:")," Experimenter may report errors with your recipe configuration. You\nmust fix them before requesting launch. Ask in ",(0,l.kt)("inlineCode",{parentName:"p"},"#ask-experimenter")," on Slack.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Ask release management to approve and launch the rollout."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Note:")," If you are a member of release management, you must get ",(0,l.kt)("em",{parentName:"p"},"another"),"\nmember to to approve and launch. Experimenter requires a 2 person sign-off to\nlaunch experiments: the person who requests the launch cannot be the person\nwho approves it."))),(0,l.kt)("a",{id:"example-configuration"}),(0,l.kt)("h1",{id:"example-configuration"},"Example Configuration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "prefs": {\n        "the.pref.to.set": {\n            "branch": "user",\n            "value": "hello world"\n        },\n        "another.pref.to.set": {\n            "branch": "default",\n            "value": true\n        },\n        "unset.this.pref": {\n            "branch": "user",\n            "value": null\n        }\n    }\n}\n')),(0,l.kt)("h1",{id:"causes-of-unenrollment"},"Causes of Unenrollment"),(0,l.kt)("h2",{id:"mismatched-types"},"Mismatched Types"),(0,l.kt)("p",null,"If you attempt to set a pref to a value of the wrong type, the pref will fail to\nset. This will cause the enrollment to end.\nThis will result in a unenrollment event\n(",(0,l.kt)("a",{parentName:"p",href:"https://dictionary.telemetry.mozilla.org/apps/firefox_desktop/metrics/nimbus_events_unenrollment"},"glean"),", ",(0,l.kt)("a",{parentName:"p",href:"https://probes.telemetry.mozilla.org/?search=unenroll&view=detail&probeId=event%2Fnormandy.unenroll%23unenroll"},"legacy"),") being submitted with the\nfollowing data:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Glean Field"),(0,l.kt)("th",null,"Legacy Field"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"reason")),(0,l.kt)("td",null,(0,l.kt)("code",null,"reason")),(0,l.kt)("td",null,"The string ",(0,l.kt)("code",null,'"prefFlips-failed"'))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"pref_name")),(0,l.kt)("td",null,(0,l.kt)("code",null,"prefName")),(0,l.kt)("td",null,"The pref that that failed to set.")),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"pref_type")),(0,l.kt)("td",null,(0,l.kt)("code",null,"prefType")),(0,l.kt)("td",null,"The type of the existing pref.")))),(0,l.kt)("h2",{id:"conflicts-with-setpref-experiments"},"Conflicts with setPref Experiments"),(0,l.kt)("p",null,"If a user is enrolled in a incident response pref flip and then enrolls in a\n",(0,l.kt)("a",{parentName:"p",href:"/desktop-pref-experiments"},"setPref")," experiment that changes the same prefs, they will be unenrolled from\nthe incident response rollout. This will result in a unenrollment event\n(",(0,l.kt)("a",{parentName:"p",href:"https://dictionary.telemetry.mozilla.org/apps/firefox_desktop/metrics/nimbus_events_unenrollment"},"glean"),", ",(0,l.kt)("a",{parentName:"p",href:"https://probes.telemetry.mozilla.org/?search=unenroll&view=detail&probeId=event%2Fnormandy.unenroll%23unenroll"},"legacy"),") being submitted with the\nfollowing data:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Glean Field"),(0,l.kt)("th",null,"Legacy Field"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"reason")),(0,l.kt)("td",null,(0,l.kt)("code",null,"reason")),(0,l.kt)("td",null,"The string ",(0,l.kt)("code",null,'"prefFlips-conflict"'))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"conflicting_slug")),(0,l.kt)("td",null,(0,l.kt)("code",null,"conflictingSlug")),(0,l.kt)("td",null,"The slug of the experiment that caused the unenrollment.")))),(0,l.kt)("h2",{id:"user-pref-changes"},"User Pref Changes"),(0,l.kt)("p",null,"If a pref that is controlled by an incident response rollout is changed, either\nby the user or client code, the client will be unenrolled. This will result in an\nunenrollment event (",(0,l.kt)("a",{parentName:"p",href:"https://dictionary.telemetry.mozilla.org/apps/firefox_desktop/metrics/nimbus_events_unenrollment"},"glean"),", ",(0,l.kt)("a",{parentName:"p",href:"https://probes.telemetry.mozilla.org/?search=unenroll&view=detail&probeId=event%2Fnormandy.unenroll%23unenroll"},"legacy"),") being\nsubmitted with the following data:"),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Glean Field"),(0,l.kt)("th",null,"Legacy Field"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"reason")),(0,l.kt)("td",null,(0,l.kt)("code",null,"reason")),(0,l.kt)("td",null,"The string ",(0,l.kt)("code",null,'"changed-pref"'))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("code",null,"changed_pref")),(0,l.kt)("td",null,(0,l.kt)("code",null,"changedPref")),(0,l.kt)("td",null,"The pref that triggered the unenrollment.")))))}d.isMDXComponent=!0}}]);